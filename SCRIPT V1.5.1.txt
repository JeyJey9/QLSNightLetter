import os
import threading
import logging
import warnings
import datetime
import pandas as pd
import pdfplumber
import re
import xlwings as xw
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from concurrent.futures import ThreadPoolExecutor

# --- Tooltip helper ---
class ToolTip:
    def __init__(self, widget, text, delay=500):
        self.widget, self.text, self.delay = widget, text, delay
        self.tipwindow = None
        self.id = None
        widget.bind("<Enter>", self._schedule)
        widget.bind("<Leave>", self._hide)
    def _schedule(self, e=None):
        self.id = self.widget.after(self.delay, self._show)
    def _show(self, e=None):
        if self.tipwindow: return
        x,y,cx,cy = self.widget.bbox("insert")
        x += self.widget.winfo_rootx()+25
        y += cy + self.widget.winfo_rooty()+25
        tw = tk.Toplevel(self.widget)
        tw.wm_overrideredirect(True)
        tw.wm_geometry(f"+{x}+{y}")
        lbl = ttk.Label(tw, text=self.text, justify="left",
                        background="#ffffe0", relief="solid", borderwidth=1,
                        padding=(5,3))
        lbl.pack()
        self.tipwindow = tw
    def _hide(self, e=None):
        if self.id:
            self.widget.after_cancel(self.id)
            self.id = None
        if self.tipwindow:
            self.tipwindow.destroy()
            self.tipwindow = None

# logging & warnings
logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')
warnings.filterwarnings("ignore", message="CropBox missing from.*")

# -----------------------------------------------------------------------------
def parse_pdf_values(pdf_path):
    with pdfplumber.open(pdf_path) as pdf:
        text = pdf.pages[0].extract_text() or ""
    target = next((ln for ln in text.split("\n") if "Actual Unit Concern" in ln), "")
    nums = [n for n in re.findall(r"\d+\.\d+|\d+", target) if n!='1000']
    if len(nums) < 14: return None
    mseg, wseg, dseg = nums[2:8], nums[8:14], nums[14:]
    if not (mseg and wseg and dseg): return None
    pick = lambda seg,i: seg[-i] if len(seg)>=i else seg[-1]
    return {
        'monthly_last': pick(mseg,1), 'monthly_prev': pick(mseg,2),
        'weekly_last':  pick(wseg,1), 'weekly_prev':  pick(wseg,2),
        'daily_last':   pick(dseg,1), 'daily_prev':   pick(dseg,2),
        'daily_prev2':  pick(dseg,3),
    }

# -----------------------------------------------------------------------------
def process_pdf(pdf_path, root_folder, output_root, log_func, update_prog):
    rel = os.path.relpath(pdf_path, root_folder)
    out_xlsx = os.path.join(output_root, os.path.splitext(rel)[0] + ".xlsx")
    os.makedirs(os.path.dirname(out_xlsx), exist_ok=True)
    vals = parse_pdf_values(pdf_path)
    if not vals:
        log_func(f"[WARN] Skipped {os.path.basename(pdf_path)} (insufficient data)\n")
        update_prog()
        return False
    pd.DataFrame([vals]).to_excel(out_xlsx, sheet_name="Data", index=False)
    log_func(f"[OK] Extracted Data for {os.path.basename(pdf_path)}\n")
    update_prog()
    return True

# -----------------------------------------------------------------------------
def update_masters_xlwings(mapping_file, output_root, root_folder,
                           upd_last_monthly, upd_last_weekly, upd_last_daily,
                           upd_prev_monthly, upd_prev_weekly, upd_prev_daily,
                           use_yesterday_daily,
                           shift_monthly, shift_weekly, shift_daily,
                           log_func, update_prog):

    # build mapping DataFrame (unchanged)
    mapping_sheets = pd.read_excel(mapping_file, sheet_name=None)
    maps = []
    for sheet_name, df in mapping_sheets.items():
        prog = sheet_name.split()[0]
        folder = " ".join(sheet_name.split()[1:])
        df = df.rename(columns=str.strip)
        if 'Manual_label' in df.columns and 'Manual_Label' not in df.columns:
            df = df.rename(columns={'Manual_label':'Manual_Label'})
        maps.append(df.assign(Program=prog, Folder=folder))
    mapping_df = pd.concat(maps, ignore_index=True)

    # use context manager so Excel always quits
    with xw.App(visible=False) as app:
        # speed-ups
        app.api.ScreenUpdating = False
        app.api.DisplayAlerts  = False
        app.api.EnableEvents   = False
        app.api.Calculation    = xw.constants.Calculation.xlCalculationManual

        masters = [
            os.path.join(root_folder, f)
            for f in os.listdir(root_folder)
            if f.lower().startswith("study_nl_") and f.lower().endswith(".xlsx")
        ]

        for mf in masters:
            log_func(f"Updating (xlwings) {os.path.basename(mf)}...\n")
            wb = app.books.open(mf)

            for sht in wb.sheets:
                name = sht.name
                if "Items_FCPA" in name:
                    folder = "FCPA"
                elif "Items_WO CAL" in name:
                    folder = "WO CAL"
                elif "Items_CAL" in name:
                    folder = "CAL"
                else:
                    continue

                prog = name.split()[0]
                subset = mapping_df[
                    (mapping_df.Program == prog) &
                    (mapping_df.Folder  == folder)
                ]

                # get row range
                col_b   = sht.range("B3").expand("down").value or []
                max_row = sht.range("B3").expand("down").last_cell.row

                # 1) SHIFT FIRST
                if shift_monthly:
                    sht.range(f"C3:E{max_row}").value = sht.range(f"D3:F{max_row}").value
                    sht.range(f"F3:F{max_row}").value = None
                if shift_weekly:
                    sht.range(f"H3:L{max_row}").value = sht.range(f"I3:M{max_row}").value
                    sht.range(f"M3:M{max_row}").value = None
                if shift_daily:
                    sht.range(f"O3:P{max_row}").value = sht.range(f"P3:Q{max_row}").value
                    sht.range(f"Q3:Q{max_row}").value = None

                # 2) THEN WRITE EXTRACTED VALUES
                for _, row in subset.iterrows():
                    sticker = str(row.iloc[0]).strip()
                    stem    = str(row.iloc[1]).strip().removesuffix(".pdf")
                    data_file = os.path.join(output_root, prog, folder, f"{stem}.xlsx")
                    if not os.path.isfile(data_file):
                        log_func(f"[WARN] Missing data: {data_file}\n")
                        continue

                    data = pd.read_excel(data_file, sheet_name=0).iloc[0]
                    ml = data.get('monthly_last'); mp = data.get('monthly_prev')
                    wl = data.get('weekly_last');  wp = data.get('weekly_prev')
                    dl = data.get('daily_last', data.get('daily_prev'))
                    dp = data.get('daily_prev');       dp2 = data.get('daily_prev2', dp)

                    for row_idx, cell in enumerate(col_b, start=3):
                        if str(cell).strip() == sticker:
                            if upd_last_monthly and ml is not None:
                                sht.cells(row_idx,6).value = ml
                            if upd_prev_monthly and mp is not None:
                                sht.cells(row_idx,5).value = mp
                            if upd_last_weekly and wl is not None:
                                sht.cells(row_idx,13).value = wl
                            if upd_prev_weekly and wp is not None:
                                sht.cells(row_idx,12).value = wp

                            if upd_last_daily:
                                pdf_p = os.path.join(root_folder, prog, folder, stem + ".pdf")
                                try:
                                    hr = datetime.datetime.fromtimestamp(os.path.getmtime(pdf_p)).hour
                                except:
                                    hr = 0
                                val = dp if (use_yesterday_daily and hr >= 8) else dl
                                sht.cells(row_idx,17).value = val

                            if upd_prev_daily:
                                val2 = dp2 if (use_yesterday_daily and upd_last_daily) else dp
                                sht.cells(row_idx,16).value = val2
                            break

            wb.save()
            wb.close()
            update_prog()

        # restore Excel defaults
        app.api.Calculation    = xw.constants.Calculation.xlCalculationAutomatic
        app.api.DisplayAlerts  = True
        app.api.EnableEvents   = True
        app.api.ScreenUpdating = True


# -----------------------------------------------------------------------------
def launch_gui():
    root = tk.Tk()
    root.title("QLS Night Letter")

    root_folder    = tk.StringVar(value=os.getcwd())
    mapping_file_v = tk.StringVar(value="Sticker_Mapping.xlsx")
    last_monthly   = tk.BooleanVar(value=True)
    last_weekly    = tk.BooleanVar(value=True)
    last_daily     = tk.BooleanVar(value=True)
    prev_monthly   = tk.BooleanVar(value=False)
    prev_weekly    = tk.BooleanVar(value=False)
    prev_daily     = tk.BooleanVar(value=False)
    use_yesterday  = tk.BooleanVar(value=False)

    shift_monthly  = tk.BooleanVar(value=False)
    shift_weekly   = tk.BooleanVar(value=False)
    shift_daily    = tk.BooleanVar(value=False)

    frm = ttk.Frame(root, padding=10)
    frm.grid(row=0, column=0, sticky="nsew")

    # paths
    ttk.Label(frm, text="Root Folder:").grid(row=0, column=0, sticky="w")
    ttk.Entry(frm, textvariable=root_folder, width=50).grid(row=0, column=1)
    ttk.Button(frm, text="Browse", command=lambda: root_folder.set(filedialog.askdirectory())
    ).grid(row=0, column=2)

    ttk.Label(frm, text="Mapping File:").grid(row=1, column=0, sticky="w")
    ttk.Entry(frm, textvariable=mapping_file_v, width=50).grid(row=1, column=1)
    ttk.Button(frm, text="Browse",
               command=lambda: mapping_file_v.set(filedialog.askopenfilename(filetypes=[("Excel","*.xlsx")]))
    ).grid(row=1, column=2)

    # extraction toggles
    ttk.Checkbutton(frm, text="Last Monthly  (F)",  variable=last_monthly).grid(row=2, column=0)
    ttk.Checkbutton(frm, text="Last Weekly   (M)",  variable=last_weekly).grid(row=2, column=1)
    ttk.Checkbutton(frm, text="Last Daily    (Q)",  variable=last_daily).grid(row=2, column=2)
    ttk.Checkbutton(frm, text="Prev Monthly  (E)",  variable=prev_monthly).grid(row=3, column=0)
    ttk.Checkbutton(frm, text="Prev Weekly   (L)",  variable=prev_weekly).grid(row=3, column=1)
    ttk.Checkbutton(frm, text="Prev Daily    (P)",  variable=prev_daily).grid(row=3, column=2)

    chk_use = ttk.Checkbutton(frm, text="Use Yesterday’s Daily for Q", variable=use_yesterday)
    chk_use.grid(row=4, column=2, sticky="w")
    ToolTip(chk_use, "If checked and PDF ≥08:00, Q uses yesterday’s value")

    # shift toggles
    ttk.Label(frm, text="Shift Values:").grid(row=5, column=0, sticky="w")
    ttk.Checkbutton(frm, text="Monthly (D→C–F→E)", variable=shift_monthly).grid(row=5, column=1)
    ttk.Checkbutton(frm, text="Weekly  (I→H–M→L)", variable=shift_weekly).grid(row=5, column=2)
    ttk.Checkbutton(frm, text="Daily   (P→O–Q→P)", variable=shift_daily).grid(row=5, column=3)

    # progress & log
    progress = ttk.Progressbar(frm, length=400, mode='determinate')
    progress.grid(row=6, column=0, columnspan=4, pady=10)
    txt = tk.Text(frm, width=100, height=20)
    txt.grid(row=7, column=0, columnspan=4)

    def log_func(msg):
        txt.insert(tk.END, msg); txt.see(tk.END)
    def update_prog():
        progress['value'] += 1

    def on_run():
        txt.delete('1.0','end')
        progress['value'] = 0
        r = root_folder.get()

        # gather PDFs
        pdfs = []
        for plant in os.listdir(r):
            for fld in ['CAL','WO CAL','FCPA']:
                d = os.path.join(r, plant, fld)
                if os.path.isdir(d):
                    for f in os.listdir(d):
                        if f.lower().endswith('.pdf'):
                            pdfs.append(os.path.join(d, f))

        # track insufficient
        insufficient = []

        masters = [f for f in os.listdir(r)
                   if f.lower().startswith("study_nl_") and f.lower().endswith(".xlsx")]

        progress['maximum'] = len(pdfs) + len(masters)

        def worker():
            out_root = os.path.join(r, "EXCEL_OUTPUT")
            os.makedirs(out_root, exist_ok=True)

            # parallel PDF→Excel
            def wrapper(pdf):
                ok = process_pdf(pdf, r, out_root, log_func, update_prog)
                if not ok:
                    insufficient.append(os.path.basename(pdf))
                return ok

            with ThreadPoolExecutor(max_workers=2) as exe:
                list(exe.map(wrapper, pdfs))

            # master update
            update_masters_xlwings(
                mapping_file_v.get(), out_root, r,
                last_monthly.get(), last_weekly.get(), last_daily.get(),
                prev_monthly.get(), prev_weekly.get(), prev_daily.get(),
                use_yesterday.get(),
                shift_monthly.get(), shift_weekly.get(), shift_daily.get(),
                log_func, update_prog
            )

            # log insufficient
            if insufficient:
                log_func(f"\n{len(insufficient)} skipped (insufficient data):\n")
                for fn in insufficient:
                    log_func(f"  • {fn}\n")

            messagebox.showinfo("Done", f"Complete. {len(insufficient)} skipped.")

        threading.Thread(target=worker, daemon=True).start()

    ttk.Button(frm, text="Run", command=on_run).grid(row=8, column=1, pady=10)
    ttk.Label(frm, text="Version 1.5.1").grid(row=9, column=0, sticky="w", pady=(10,0))
    ttk.Label(frm, text="grece@ford.com.tr").grid(row=9, column=3, sticky="e", pady=(10,0))

    root.mainloop()

if __name__ == "__main__":
    launch_gui()
